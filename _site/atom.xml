<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Mojtaba Barzegari</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2023-07-31T23:12:20+02:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Perform unit testing of Qt programs in GitHub Actions using Docker</title>
   <link href="http://localhost:4000/2023/07/30/unit-test-qt-program-in-github-actions/"/>
   <updated>2023-07-30T00:00:00+02:00</updated>
   <id>http://localhost:4000/2023/07/30/unit-test-qt-program-in-github-actions</id>
   <content type="html">&lt;p&gt;In the &lt;a href=&quot;/2022/12/09/build-qt-in-docker-for-github-actions/&quot;&gt;previous post&lt;/a&gt;, we built a Docker container for Qt and pushed it to &lt;a href=&quot;https://hub.docker.com/r/mbarzegary/qt-5.15.2-freefem-4.10&quot;&gt;Docker Hub&lt;/a&gt; (the pushed container includes FreeFEM too, but we don’t need to care about it for the purpose of this post). Now, it’s time to pull the image in a GitHub Action to test the build process and functionality of Qt programs.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;https://github.com/addnab/docker-run-action&quot;&gt;this action&lt;/a&gt; to pull the image and run the build procedure. First, we add a YAML file, called &lt;code class=&quot;highlighter-rouge&quot;&gt;main.yml&lt;/code&gt;, to the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; in the GitHub repository (like &lt;a href=&quot;https://github.com/mbarzegary/BioDeg-UI/blob/main/.github/workflows/main.yml&quot;&gt;this example&lt;/a&gt;) and add the following content to it:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Triggers the workflow on push or pull request events but only &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# for the main branch&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# A workflow run is made up of one or more jobs that can run&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# sequentially or in parallel&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This workflow contains a single job called &quot;build&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Steps represent a sequence of tasks that will be executed &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# as part of the job&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# so your job can access it&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Pulls a Docker image and builds the software inside it&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and test BioDeg&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;addnab/docker-run-action@v3&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker.io&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mbarzegary/qt-5.15.2-freefem-4.10:latest&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-v $:/data&lt;/span&gt; 
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/buildWithDocker.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This action gets triggered when any commit is pushed to the repository, resulting in the Docker image being pulled and the whole repository being mounted into a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;. Then, it executes the build script file (in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;buildWithDocker.sh&lt;/code&gt; in the root of the repository) inside the container. The following is an example of the &lt;code class=&quot;highlighter-rouge&quot;&gt;buildWithDocker.sh&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# build the repo inside the docker container&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# used for CI builds and tests&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /data
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
cmake ..
make
make &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The full running example can be explored in &lt;a href=&quot;https://github.com/mbarzegary/BioDeg-UI&quot;&gt;this repository&lt;/a&gt;. The log of previous ran tests can be viewed &lt;a href=&quot;https://github.com/mbarzegary/BioDeg-UI/actions/workflows/main.yml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Build Qt inside a Docker container for GitHub Actions</title>
   <link href="http://localhost:4000/2022/12/09/build-qt-in-docker-for-github-actions/"/>
   <updated>2022-12-09T00:00:00+01:00</updated>
   <id>http://localhost:4000/2022/12/09/build-qt-in-docker-for-github-actions</id>
   <content type="html">&lt;p&gt;Recently, I needed to setup a GitHub Action for a repository contatining a Qt-based program, in which I can check if the C++ code compiles correctly and tests pass successfully. The repository belongs to &lt;a href=&quot;https://github.com/mbarzegary/BioDeg-UI&quot;&gt;BioDeg&lt;/a&gt;, a software &lt;a href=&quot;https://joss.theoj.org/papers/10.21105/joss.04281&quot;&gt;we have published&lt;/a&gt; for biodegradation simulations.&lt;/p&gt;

&lt;p&gt;One of the best solutions for tackilng this issue was a Docker container with Qt SDK inside, which can be tricky to make due to the licensing things of Qt. In order to make such a container image, I used the following Dockerfile code, which downloads and builds the Qt SDK with an Ubuntu image as the base.&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ubuntu:20.04 AS builder&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; DEBIAN_FRONTEND noninteractive&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_VERSION_MAJOR 5.15&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_VERSION 5.15.2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_DEST /usr/local/Qt-&quot;$QT_VERSION&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT5BINDIR /usr/local/Qt-&quot;$QT_VERSION&quot;/bin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; LD_LIBRARY_PATH /usr/local/Qt-$QT_VERSION/lib&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_QPA_PLATFORM_PLUGIN_PATH /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_QPA_FONTDIR /usr/lib/x86_64-linux-gnu/qt5/lib/fonts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; XDG_DATA_HOME /root/.local/share&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PATH $QT_DEST/bin:$PATH&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt autoremove &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; wget xz-utils

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; https://download.qt.io/official_releases/qt/&lt;span class=&quot;nv&quot;&gt;$QT_VERSION_MAJOR&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$QT_VERSION&lt;/span&gt;/single/qt-everywhere-src-&lt;span class=&quot;nv&quot;&gt;$QT_VERSION&lt;/span&gt;.tar.xz &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; /root/Downloads/qt &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xf&lt;/span&gt; /root/Downloads/qt/qt-everywhere-src-&lt;span class=&quot;nv&quot;&gt;$QT_VERSION&lt;/span&gt;.tar.xz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /root/Downloads/qt

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;   libfontconfig1-dev libfreetype6-dev libx11-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libxrender-dev libxcb1-dev libxcb-glx0-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libxcb-icccm4-dev libxcb-sync0-dev libxcb-xfixes0-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libxcb-shape0-dev libxcb-randr0-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libxcb-render-util0-dev libxcb-xinerama0-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libxkbcommon-dev libxkbcommon-x11-dev libclang-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            freeglut3-dev mesa-utils libdrm-dev libgles2-mesa-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            binutils g++ cmake g++ mesa-common-dev build-essential &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libglew-dev libglm-dev make gcc pkg-config &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libgl1-mesa-dev libxcb1-dev libfontconfig1-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libxkbcommon-x11-dev python libgtk-3-dev build-essential &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            default-jre openjdk-8-jdk-headless android-sdk &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            android-sdk-platform-23 libc6-i386 libdrm-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libgles2-mesa-dev libzc-dev libxcb-sync-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            libsmartcols-dev libicecc-dev libpthread-workqueue-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;	        libgstreamer1.0-dev libgcrypt20-dev libqt5gui5-gles &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            qca-qt5-2-utils xorg xorg-dev

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /root/Downloads/qt/qt-everywhere-src-&lt;span class=&quot;nv&quot;&gt;$QT_VERSION&lt;/span&gt;/ &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class=&quot;nt&quot;&gt;-release&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-no-opengl&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-opensource&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-confirm-license&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-make&lt;/span&gt; libs &lt;span class=&quot;nt&quot;&gt;-nomake&lt;/span&gt; tools &lt;span class=&quot;nt&quot;&gt;-nomake&lt;/span&gt; examples &lt;span class=&quot;nt&quot;&gt;-nomake&lt;/span&gt; tests &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qt3d &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtandroidextras &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtcanvas3d &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtconnectivity &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtdatavis3d &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtdeclarative &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtdoc &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtgamepad &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtgraphicaleffects &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtimageformats &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtlocation &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtlottie &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtmacextras &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtmultimedia &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtnetworkauth &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtpurchasing &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtquick3d &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtquickcontrols &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtquickcontrols2 &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtquicktimeline &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtremoteobjects &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtscript &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtscxml &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtsensors &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtserialbus &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtserialport &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtspeech &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtsvg &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qttools &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qttranslations &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtvirtualkeyboard &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtwebchannel &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtwebengine &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtwebglplugin &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtwebsockets &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtwebview &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtwinextras &lt;span class=&quot;nt&quot;&gt;-skip&lt;/span&gt; qtxmlpatterns &lt;span class=&quot;nt&quot;&gt;-sysconfdir&lt;/span&gt; /etc/xdg &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;-system-harfbuzz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-no-rpath&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nt&quot;&gt;-j4&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /root/Downloads/qt/qt-everywhere-src-&lt;span class=&quot;nv&quot;&gt;$QT_VERSION&lt;/span&gt;.tar.xz &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /root/Downloads/qt/qt-everywhere-src-&lt;span class=&quot;nv&quot;&gt;$QT_VERSION&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ubuntu:20.04&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_VERSION_MAJOR 5.15&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_VERSION 5.15.2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_DEST /usr/local/Qt-&quot;$QT_VERSION&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT5BINDIR /usr/local/Qt-&quot;$QT_VERSION&quot;/bin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; LD_LIBRARY_PATH /usr/local/Qt-$QT_VERSION/lib&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_QPA_PLATFORM_PLUGIN_PATH /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; QT_QPA_FONTDIR /usr/lib/x86_64-linux-gnu/qt5/lib/fonts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; XDG_DATA_HOME /root/.local/share&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PATH $QT_DEST/bin:$PATH&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    build-essential &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    mesa-common-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    cmake &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    libpcre2-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    libglib2.0-0 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    libpng16-16 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    libharfbuzz-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$QT_DEST&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder $QT_DEST $QT_DEST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have skipped the Qt libraries I didn’t need, so make sure to modify the configure script args to fit your needs. After this, the image was pushed to &lt;a href=&quot;https://hub.docker.com/r/mbarzegary/qt-5.15.2-freefem-4.10&quot;&gt;Docker Hub&lt;/a&gt; to be used in a GitHub Action. In the next post, I will elaborate on making the GitHub Action such that it would pull and use this built Docker image.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Weak (variational) formulation of Navier-Stokes equation</title>
   <link href="http://localhost:4000/2022/11/14/derive-weak-form-pde-navier-stokes/"/>
   <updated>2022-11-14T00:00:00+01:00</updated>
   <id>http://localhost:4000/2022/11/14/derive-weak-form-pde-navier-stokes</id>
   <content type="html">&lt;p&gt;Computational Fluid Dynamics (CFD) is the field of studying the dynamics of fluid flow using mathematical and computational methods. The fluid flow is usually expressed in the form of Navier-Stokes or Stokes equations, on which appropriate numerical schemes are applied, and the derived system of equations is solved using computers, resulting in the prediction of flow patterns and secondary entities like the shear stress.&lt;/p&gt;

&lt;p&gt;The concept of the weak formulation needed for solving partial differential equations (PDEs) numerically using the finite element method was already discussed &lt;a href=&quot;/2020/11/06/derive-weak-form-pde/&quot;&gt;here&lt;/a&gt;. In this post, we have a look at how to derive the weak form of the Navier-Stokes equations, which can be used in available open-source PDE solvers (like &lt;a href=&quot;https://freefem.org/&quot;&gt;FreeFEM&lt;/a&gt;, &lt;a href=&quot;https://fenicsproject.org/&quot;&gt;FEniCS&lt;/a&gt;, and &lt;a href=&quot;https://www.dealii.org/&quot;&gt;deal.ii&lt;/a&gt;) to simulate fluid flow in any desired domain.&lt;/p&gt;

&lt;p&gt;In its general form, the Navier-Stokes equations describing the flow of an incompressible fluid with constant density &lt;script type=&quot;math/tex&quot;&gt;\rho&lt;/script&gt; in the domain &lt;script type=&quot;math/tex&quot;&gt;\Omega \subset \mathbb{R}^{d}&lt;/script&gt; (with &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; being the dimension, so 2 or 3) can be written as :&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left\{ {\begin{array}{*{20}{l}}
\displaystyle  {\frac{\partial \mathbf{u}}{\partial t} - {\nabla\cdot}[\nu(\nabla {\mathbf{u}} + \nabla {\mathbf{u}^T})] + ({\mathbf{u}}.\nabla ){\mathbf{u}} + \nabla {\mathbf{p}} = {\mathbf{f}},\quad x \in \Omega ,t &gt; 0,} \\
\displaystyle  {\nabla\cdot{\mathbf{u}} = 0,\quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad x \in \Omega ,t &gt; 0,}
\end{array}} \right.&lt;/script&gt;

&lt;p&gt;in which &lt;script type=&quot;math/tex&quot;&gt;\mathbf{u}&lt;/script&gt; is the fluid velocity, &lt;script type=&quot;math/tex&quot;&gt;\mathbf{p}&lt;/script&gt; is the pressure (which is actually pressure divided by the density), &lt;script type=&quot;math/tex&quot;&gt;\nu = \frac{\mu}{\rho}&lt;/script&gt; is the kinematic viscosity (with &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; being the dynamic viscosity), and
&lt;script type=&quot;math/tex&quot;&gt;\mathbf{f}&lt;/script&gt; is a force term. The equations are conservation of linear momentum and conservation of mass (also called continuity equation), respectively. When &lt;script type=&quot;math/tex&quot;&gt;\nu&lt;/script&gt; is constant, the diffusion term can be simplified as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{div} [\nu(\nabla {\bf u}+\nabla {\bf u}^{T})] =\nu (\Delta {\bf u} + \nabla \text{div} {\bf u})=\nu \Delta {\bf u},&lt;/script&gt;

&lt;p&gt;which turns the general form into the following:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left\{ {\begin{array}{*{20}{l}}
\displaystyle  {\frac{\partial \mathbf{u}}{\partial t} - \nu\Delta{\mathbf{u}} + \left( {\mathbf{u} \cdot \nabla } \right) {\mathbf{u}} + \nabla p = {\mathbf{f}},\quad x \in \Omega ,t &gt; 0,} \\
 \displaystyle {\nabla\cdot{\mathbf{u}} = 0,\quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad x \in \Omega ,t &gt; 0,}
\end{array}} \right.&lt;/script&gt;

&lt;p&gt;This equation satisfies the incompressibility condition &lt;script type=&quot;math/tex&quot;&gt;\nabla\cdot\mathbf{u}=0&lt;/script&gt; and needs proper initial and boundary conditions to be well-posed. The initial condition can be defined as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{\bf u}({\bf x},0)={\bf u}_{0}({\bf x})\qquad \forall{\bf x}\ \epsilon\ {\bf \Omega,}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;{\bf u}_{0}&lt;/script&gt; is a divergence-free velocity field. Various types of boundary conditions can be applied. For example, if &lt;script type=&quot;math/tex&quot;&gt;\partial \Omega&lt;/script&gt; is the boundary of &lt;script type=&quot;math/tex&quot;&gt;\Omega&lt;/script&gt;, it can be split into 3 distinct boundaries &lt;script type=&quot;math/tex&quot;&gt;\partial \Omega=\Gamma_{1} \cup \Gamma_{2} \cup \Gamma_{3}&lt;/script&gt; each of which with a different type. On &lt;script type=&quot;math/tex&quot;&gt;\Gamma_{1}&lt;/script&gt;, the inlet can be defined as a Dirichlet boundary condition for the velocity for a given velocity profile &lt;script type=&quot;math/tex&quot;&gt;{\bf g}&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{\bf u} = {\bf g} \quad \text{on } \Gamma_1&lt;/script&gt;

&lt;p&gt;On &lt;script type=&quot;math/tex&quot;&gt;\Gamma_2&lt;/script&gt;, a wall boundary no-slip condition can be considered:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{\bf u} = 0 \quad \text{on } \Gamma_2&lt;/script&gt;

&lt;p&gt;On &lt;script type=&quot;math/tex&quot;&gt;\Gamma_3&lt;/script&gt;, for the outlet condition, a homogeneous Neumann condition on velocity and a zero pressure condition can be defined like:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial {\bf u}}{\partial n} = 0, \quad \mathbf{p} = 0, \quad \text{on } \Gamma_3&lt;/script&gt;

&lt;p&gt;with &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; being the normal direction on the boundary &lt;script type=&quot;math/tex&quot;&gt;\partial \Omega&lt;/script&gt;. Broadly speaking, these boundaries can be grouped into 2 sets:   &lt;script type=&quot;math/tex&quot;&gt;\Gamma_{D} = \Gamma_{1} \cup \Gamma_{2}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\Gamma_{N} = \Gamma_{3}&lt;/script&gt; for boundaries with Dirichlet and Neumann conditions, respectively.&lt;/p&gt;

&lt;p&gt;The Navier-Stokes equations can be written componentwise for individual components of the flow vector field in the Cartesian coordinates. Denoting &lt;script type=&quot;math/tex&quot;&gt;u_i, i=1,\ldots,d&lt;/script&gt; (with &lt;script type=&quot;math/tex&quot;&gt;d=2&lt;/script&gt; in 2D and &lt;script type=&quot;math/tex&quot;&gt;d=3&lt;/script&gt; in 3D), the equation can be presented as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left\{ {\begin{array}{*{20}{l}}
\displaystyle  {\frac{\partial {u_i}}{\partial t} - \nu \Delta {u_i} + \mathop \sum \limits_{j = 1}^d {u_j}\frac{\partial {u_i}}{\partial {x_j}} + \frac{\partial p}{\partial {x_i}} = {f_i},\qquad i = 1, \ldots ,d,} \\
\displaystyle  {\mathop \sum \limits_{j = 1}^d \frac{\partial {u_j}}{\partial {x_j}} = 0.}
\end{array}} \right.&lt;/script&gt;

&lt;p&gt;For deriving the weak formulation, the first equation of the Navier-Stokes is multiplied by a test function &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; defined on a proper function space V in which the test functions vanish on the Dirichlet boundary:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;V = [{\bf H}^{1}_{\Gamma_{D}}(\Omega)]^{d} = \lbrace{\bf V} \in [{\bf H}^{1}(\Omega)]^{d} : {\bf v}|\Gamma_{D} = {\bf 0}\rbrace.&lt;/script&gt;

&lt;p&gt;yielding to:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{\mathop{\int}_{\Omega}} {\partial {\bf u} \over \partial t}.{\bf v}\ d\omega- {\mathop{\int}_{\Omega}}\nu\triangle{\bf u.v}d\omega+ {\mathop{\int}_{\Omega}}[({\bf u.\nabla){\bf u].{\bf v}}}d\omega+ {\mathop{\int}_{\Omega}}\nabla p.{\bf v}d\omega= {\mathop{\int}_{\Omega}}{\bf f. v}d\omega.&lt;/script&gt;

&lt;p&gt;Applying Green’s divergence theory results in:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;-\int_{\Omega} \nu \Delta \mathbf{u} \cdot \mathbf{v} d \omega=\int_{\Omega} \nu \nabla \mathbf{u} \cdot \nabla \mathbf{v} d \omega-\int_{\partial \Omega} \nu \frac{\partial \mathbf{u}}{\partial \mathbf{n}} \cdot \mathbf{v} d \gamma&lt;/script&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{\Omega} \nabla p \cdot \mathbf{v} d \omega=-\int_{\Omega} p \nabla\cdot \mathbf{v} d \omega+\int_{\partial \Omega} p \mathbf{v} \cdot \mathbf{n} d \gamma&lt;/script&gt;

&lt;p&gt;Substituting these two equation into the first equation yields to:
&lt;script type=&quot;math/tex&quot;&gt;\begin{array}{r}
\displaystyle\int_{\Omega} \frac{\partial \mathbf{u}}{\partial t} \cdot \mathbf{v} d \omega+\int_{\Omega} \nu \nabla \mathbf{u} \cdot \nabla \mathbf{v} d \omega+\int_{\Omega}[(\mathbf{u} \cdot \nabla) \mathbf{u}] \cdot \mathbf{v} d \omega-\int_{\Omega} p \nabla\cdot \mathbf{v} d \omega \\
\displaystyle=\int_{\Omega} \mathbf{f} \cdot \mathbf{v} d \omega+\int_{\partial \Omega}\left(\nu \frac{\partial \mathbf{u}}{\partial \mathbf{n}}-p \mathbf{n}\right) \cdot \mathbf{v} d \gamma \quad \forall \mathbf{v} \in V .
\end{array}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The last term of this equation is expressed in accordance to the defined Neumann boundary condition, which vanishes on &lt;script type=&quot;math/tex&quot;&gt;\Gamma_3&lt;/script&gt; due to the defined condition. Moreover, this term vanishes on the Dirichlet boundaries due to the properties of the function space &lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, the second equation of the Navier-Stokes is multiplied by a test function &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt; belonging to the function space &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt;, called the pressure space:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Q = {\bf L}^2_0(\Omega) = \lbrace p \in L^2(\Omega) : {\mathop{\int}_{\Omega}} p \ d\omega = 0\rbrace,&lt;/script&gt;

&lt;p&gt;resulting in:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{\mathop{\int}_{\Omega}} q \nabla\cdot{\bf u}\ d\omega = 0 \qquad \forall q \in Q.&lt;/script&gt;

&lt;p&gt;The last 2 equations are so called weak (variational) forms of the Navier-Stokes equations.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>High-performance computing&#58; challenges of performance tuning and scaling of finite element models</title>
   <link href="http://localhost:4000/2022/10/27/high-performance-computing-scaling-challenge/"/>
   <updated>2022-10-27T00:00:00+02:00</updated>
   <id>http://localhost:4000/2022/10/27/high-performance-computing-scaling-challenge</id>
   <content type="html">&lt;p&gt;In my PhD project, focused on computational modeling of biodegradation process of metallic biomaterials, parallelization of the models was one of the main objectives. Parallelization was crucial to make the models run faster to get the predictions and output in less time in large-scale simulations in high-performance computing (HPC) environments. Achieving this goal got me involved in various challenges all over the project, which can be divided into two main categories: implementation and performance tuning issues. The main implementation strategy was based on high-performance mesh decomposition, partitioning and distributing the mesh among available computing resources, and then utilization of high-performance preconditioners and iterative solvers tailored for different systems and physics. This was done mostly using parallel computing features of PETSc toolkit.&lt;/p&gt;

&lt;p&gt;Although it doesn’t seem so, the performance tuning aspect can be as complicated as the implementation. Running the model using 10 CPU cores with an accepted performance and speedup does not mean that one can increase the number of cores to 100 and still get the same speedup. The same problem appears by moving from the order of hundreds to the order of thousands, and so on. Entering a new order of magnitude for the number of CPU cores requires dealing with new issues.&lt;/p&gt;

&lt;p&gt;This post briefly summarizes various issues one can face while tackling HPC and performance-tuning challenges. These experiences are obtained by working in HPC environments on VSC supercomputer in Belgium, Snellius supercomputer in the Netherlands, and ARCHER2 supercomputer in the UK.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Building tools with different MPI implementations and toolchains&lt;/strong&gt;: Running codes in an HPC environment is quite different from a local machine, where all the software and hardware configurations made by the system maintainers can affect the performance of the code. Among various software-related aspects, the chosen compiler toolchain (GNU, Intel, Cray, etc.) and MPI implementation (MPICH, OpenMPI, Intel MPI, etc.) used to build and run a code can play an important role. In most cases, the computational tools should be built with all the available toolchains and MPI implementations to check which one offers better performance on the specific HPC environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Inter-node communication&lt;/strong&gt;: Communications taking place among the computing nodes are the source of most of the problems happening in parallelization and performance tuning of codes. The first step toward a faster model can always be to check the code to remove unnecessary inter-node communications, especially for large-scale simulations. For example, there are usually redundant collective MPI calls in the model initialization that can be replaced by encapsulating more work in the main process and performing the collective operations at the end of it. These collective calls usually appear during the first round of parallelization of the code as a result of direct translation from sequential procedures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Running parallel version of tools and codes&lt;/strong&gt;: This point is actually a combination of the two previous points from a practical point of view. When a computational tool is built in HPC environments, it may fail to run in more than one node due to an inappropriate configuration during the build process. For example, &lt;a href=&quot;https://freefem.org/&quot;&gt;FreeFEM&lt;/a&gt; or &lt;a href=&quot;https://fenicsproject.org/&quot;&gt;FEniCS&lt;/a&gt; may fail to execute when the job is supposed to run in more than a single node, implying that the inter-node communication does not work due to the used MPI or compiler toolchain. This scenario frequently occurs, showing the importance of employing correct toolchains and MPI implementations. The proper configuration differs from environment to environment, so the best recommendation would be to check the HPC documentation provided by vendors or system maintainers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mesh generation for large-scale models&lt;/strong&gt;: A typical large-scale mesh may contain 20-60M tetrahedral elements. Besides the technical aspects of the computational part, generating such a mesh can be quite challenging and time-consuming. Some of the common tools used for mesh generation have a parallel version aimed to work with a couple of CPU cores to reduce the time needed for mesh generation. For example, Mmg has a parallel version called ParMmg, and CGAL supports shared-memory parallelization for volumetric mesh generation. However, these tools are not very reliable and may cause further problems. In our tests on ParMmg, the tool showed major issues with inter-node communication on large-scale mesh generation, leading us to use sequential mesh generation principles for making the mesh in some cases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mesh partitioning for large-scale models&lt;/strong&gt;: Choosing a proper mesh partitioner plays an essential role in the initialization of the simulations and can be the source of some failure in this stage. The commonly-used partitioner in my PhD research was &lt;a href=&quot;http://glaros.dtc.umn.edu/gkhome/metis/metis/overview&quot;&gt;METIS&lt;/a&gt; software. However, in particular cases and contrary to the previous point for mesh generators, it was observed that its parallel version, called &lt;a href=&quot;http://glaros.dtc.umn.edu/gkhome/metis/parmetis/overview&quot;&gt;ParMETIS&lt;/a&gt;, has significantly better performance. Switching between the sequential and parallel version of this partitioner, as well as using other tools such as &lt;a href=&quot;https://www.labri.fr/perso/pelegrin/scotch/&quot;&gt;SCOTCH&lt;/a&gt;, should be considered in the performance tuning of computational models.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Memory issues in each node&lt;/strong&gt;: Memory-related issues are one of the most common problems one can face while tuning computational models for better scaling behavior. Reviewing code for fixing memory-related issues can reduce memory usage, especially in the initialization stage, helping overcome part of these memory bottlenecks. The memory issues can be debugged in a single node execution first with the maximum memory available. In some cases, one needs to reduce the number of employed CPU cores in a node so that more memory is available to each core. Although this action can help remove memory-related errors, it reduces the efficiency of the whole computational task, leaving some CPU cores unused in each node due to memory problems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Storage and IO bottlenecks&lt;/strong&gt;: There are usually different storage volumes available in HPC environments, which differ in various aspects such as the speed of access, space limitations, and backup policies. Choosing a proper location for file IO can particularly impact the performance of the codes. In more advanced HPC environments, the user does not have direct access to high-speed storage, so explicit file operations should be defined in the job batch file describing how the files should be copied to the high-speed volumes and moved back to the home directories. Another storage-related performance bottleneck is the known issue of slowed down reading speed of a large number of small files, which exists in some HPC environments. This problem usually impacts remote postprocessing and visualization tasks, in which a large number of files should be processed on an HPC node.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Remote visualization&lt;/strong&gt;: In large-scale simulations, where the model predictions result in tremendous output files, remote postprocessing and visualization can be a more efficient option compared to conventional local processing. Moreover, doing this can be beneficial for the debugging and performance tuning of computational models, where it saves a lot of time needed to transfer the files to a local machine for analysis. For example, the visualization can be done on a node featuring a GPU using the &lt;a href=&quot;https://www.paraview.org/&quot;&gt;ParaView&lt;/a&gt; server on the remote node and the ParaView client on the local machine. Configuring such remote processing requires extra steps in HPC environments, such as making secure tunnels and setting up offscreen rendering, which are unnecessary to perform normal computational tasks.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Generate volume mesh from a surface mesh using GMSH</title>
   <link href="http://localhost:4000/2022/06/27/surface-to-volume-mesh-using-gmsh/"/>
   <updated>2022-06-27T00:00:00+02:00</updated>
   <id>http://localhost:4000/2022/06/27/surface-to-volume-mesh-using-gmsh</id>
   <content type="html">&lt;p&gt;Creating a volume mesh out of a surface mesh is a quite common task in computational sciences, especially when you deal with a sort of image segmentation resulting in a surface mesh (usually in STL format). The surface mesh is suitable for printing or demonstration purposes, but if one wants to go for a computational analysis, like a finite element analysis (FEA) for structural and heat transfer simulations or a computational fluid dynamics (CFD) simulation, then a volume mesh is required.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gmsh.info/&quot;&gt;GMSH&lt;/a&gt; is a powerful software to make such volume mesh. We can simply open a mesh in it (&lt;code class=&quot;highlighter-rouge&quot;&gt;File -&amp;gt; Open&lt;/code&gt;), define a volume (&lt;code class=&quot;highlighter-rouge&quot;&gt;Physical groups -&amp;gt; Add -&amp;gt; Volume&lt;/code&gt;), and then generate a mesh on it (&lt;code class=&quot;highlighter-rouge&quot;&gt;Mesh -&amp;gt; 3D&lt;/code&gt;). We may also need to adjust the global mesh size before meshing the volume (&lt;code class=&quot;highlighter-rouge&quot;&gt;Tools -&amp;gt; Options -&amp;gt; Mesh -&amp;gt; General -&amp;gt; Element size factor&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;But, there will be a big problem here if the surface mesh has a complex morphology, leading to a long waiting time for each of the above steps to complete on the GUI. The solution is to take advantage of the GMSH scripting language. Here is a very simple code to accomplish this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Merge 'mesh_file.stl';
Surface Loop(1) = {1};
Volume(1) = {1};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We should save this in a &lt;code class=&quot;highlighter-rouge&quot;&gt;.geo&lt;/code&gt; file (let’s say &lt;code class=&quot;highlighter-rouge&quot;&gt;meshing.geo&lt;/code&gt;) and then run this command to generate the volume mesh (which will be saved as &lt;code class=&quot;highlighter-rouge&quot;&gt;output.mesh&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gmsh meshing.geo &lt;span class=&quot;nt&quot;&gt;-3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; output.mesh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-3&lt;/code&gt; flag denotes that it’s a 3D mesh.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Use and import Python packages and modules inside ParaView (PvPython)</title>
   <link href="http://localhost:4000/2022/01/03/use-python-packages-modules-in-paraview/"/>
   <updated>2022-01-03T00:00:00+01:00</updated>
   <id>http://localhost:4000/2022/01/03/use-python-packages-modules-in-paraview</id>
   <content type="html">&lt;p&gt;I came across a couple of scenarios in which I needed to call a couple of packages inside &lt;a href=&quot;https://www.paraview.org/Wiki/ParaView/Python_Scripting&quot;&gt;PvPython&lt;/a&gt;, the Python client of &lt;a href=&quot;https://www.paraview.org/&quot;&gt;ParaView&lt;/a&gt;, which allows us to automate ParaView tasks (you may take a look at &lt;a href=&quot;&quot;&gt;this automation example&lt;/a&gt; to see how PvPython works). After trying various techniques in Windows and Linux, my conclusion is that the best solution to this problem is the one suggested &lt;a href=&quot;https://discourse.paraview.org/t/how-can-i-install-and-import-other-modules-inside-pvpython/3067&quot;&gt;here&lt;/a&gt;. But, since this solution is not elaborated and may be difficult to follow, I implement it in this post the way I did it for myself.&lt;/p&gt;

&lt;p&gt;Let’s first clarify the problem. ParaView comes with its own Python intrepreter, in which you can easily access ParaView Python package. To give it a try, open a terminal and type &lt;code class=&quot;highlighter-rouge&quot;&gt;pvpython&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;from paraview.simple import *&lt;/code&gt;. This doesn’t give you an error, but if you execute the statement in your local installation of Python, you will face the famous &lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleNotFoundError&lt;/code&gt;. Now, the problem we want to discuss is the opposite of this one: we cannot use installed packages (like pandas or matplotlib) in PvPython, a scenario that can be very helpful in different applications.&lt;/p&gt;

&lt;p&gt;You may think to yourself that the solution is quite obvious and simple: create a Python virtual environment (for example, using &lt;a href=&quot;https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html&quot;&gt;conda&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;venv&lt;/a&gt;) and execute PvPtyhon inside it. I should say that your solution is more or less correct, but it needs a major rearrangement. When you run Python inside a virtual environment, you run the interpreter that is installed inside the virtual environment. So, it means if you run PvPython inside a virtual environment, it cannot see and use the installed packages because it is NOT the interpreter the virtual environment is configured for. So, as I said, the solution is a little bit different from the initial idea: we need to activate a virtual environment while we are inside Python (in this case, inside PvPython). By doing this, the virtual environment launch script will configure the path (I mean &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt;) to point to the installed packages of the environment, and we will be able to use them inside our PvPython automation script.&lt;/p&gt;

&lt;p&gt;I think the description is a little bit confusing, no? Let’s do that in action and see how it works. We may go on with the virtual environment manager of our choice, but we should keep in mind that it should be easy to activate inside a Python script. As far as I got after a couple of searches, &lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;venv&lt;/code&gt; environments are difficult to activate programmatically, so we use &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; since using it, all we need to do is call an activation script.&lt;/p&gt;

&lt;p&gt;Let’s assume that the script we want to run is as simple as this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paraview.simple&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which means that we are going to use the pandas package in a ParaView script (this was actually the use case for which I started to seek a solution). If you run this script using a normal Python executable, you will face the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleNotFoundError: No module named 'paraview'&lt;/code&gt;, while running it using PvPython results in &lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleNotFoundError: No module named 'pandas'&lt;/code&gt;. So, it’s time for magic. First, we should install &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;virtualenv&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then, we need a virtual environment. We can create it in the same location as our script for easier access (in this case, inside a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;venv&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; virtualenv venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, it’s time to activate the environment and install the required packages inside it. We can activate the environment by executing&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ./venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in Linux and&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;&amp;gt; .\venv\Scripts\activate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in Windows. As I said before, we want to use pandas in this example, so let’s install it (make sure that the environment is activated):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pandas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are done with the environment, so we can deactivate it and come back to the normal shell. The last step is to modify the script to activate the environment when the it runs. To generalize the code, we pass the path of the environment as an argument in the command line (named &lt;code class=&quot;highlighter-rouge&quot;&gt;virtual-env&lt;/code&gt;) so that the script can work with different environments if needed. The script should be modified like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--virtual-env'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;virtualEnvPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--virtual-env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Linux
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;virtualEnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualEnvPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/bin/activate_this.py'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Windows
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# virtualEnv = virtualEnvPath + '/Scripts/activate_this.py'
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;execfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virtualEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virtualEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virtualEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__file__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The main script starts from here
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paraview.simple&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What the added code does is simple. It looks for the path of the environment and runs the activation script, meaning that the environment gets activated while the script is being interpreted by Python. Make sure to adapt the code if you want to use it under Windows. The script can be executed like this (assuming the script is named &lt;code class=&quot;highlighter-rouge&quot;&gt;my_script.py&lt;/code&gt; and the environment was created according to the above instruction in a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;venv&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pvpython my_script.py &lt;span class=&quot;nt&quot;&gt;--virtual-env&lt;/span&gt; venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should be able to run the script without any error, meaning that PvPython can see and use the pandas package installed in our virtual environment.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Data visualizations inside a web browser using ParaView Glance</title>
   <link href="http://localhost:4000/2021/09/26/data-visualization-in-browser-using-paraview-glance/"/>
   <updated>2021-09-26T00:00:00+02:00</updated>
   <id>http://localhost:4000/2021/09/26/data-visualization-in-browser-using-paraview-glance</id>
   <content type="html">&lt;p&gt;Have you ever been in demand for a solution to visualize (complex) data in a web browser (like Google Chrome or Mozilla Firefox) so that you can embed it in a website (web page)? We know that &lt;a href=&quot;https://www.paraview.org/&quot;&gt;ParaView&lt;/a&gt; is a great tool for doing such a task offline in your local machine, but what if we can employ the power of ParaView to do the visualization online and inside a web browser?&lt;/p&gt;

&lt;p&gt;Although it seems an impossible task at first, let me tell you that this is a super straightforward process by taking advantage of &lt;a href=&quot;https://kitware.github.io/paraview-glance/index.html&quot;&gt;ParaView Glance&lt;/a&gt;, one of the tools provided by the &lt;a href=&quot;https://www.paraview.org/web/&quot;&gt;ParaView Web&lt;/a&gt; project. ParaView Glance is lightweight version of ParaView developed using &lt;a href=&quot;https://kitware.github.io/vtk-js/index.html&quot;&gt;VTK.js&lt;/a&gt; as a web application to run inside a web browser. It can also be used as a tool to build custom viewers on the web. It seems to be very exciting, doesn’t it? If you want to take a look at an example to see how it looks like, you may scroll down this page a little bit or refer to the &lt;a href=&quot;/research/&quot;&gt;Research page&lt;/a&gt; and view the section in which I have provided a visualization of a degradation simulation as a glimpse into the kind of work I do during my PhD.&lt;/p&gt;

&lt;p&gt;For this post, I assume that we are going to host such visualization on an online website, like what I did here. I say this because running this locally on your machine becomes easier since you don’t need to serve the visualization file using an online service (for which I have used GitHub).&lt;/p&gt;

&lt;p&gt;In order to make it up and running, you need to take 3 steps: 1) creating a special file (a scene) using ParaView, 2) upload this special file to a service or a public location, and 3) write a couple of lines of code into the source of any web page to embed ParaView Glance into it. Let’s go through this step by step.&lt;/p&gt;

&lt;p&gt;First, we need a scence file, which can be created easily using ParaView. A scene file is a sort of snapshot from the current state of ypur visualization that you have created using a set of pipelines in ParaView. After setting up your visualization (including camera settings) in ParaView, select &lt;em&gt;Export Scene…&lt;/em&gt; from the &lt;em&gt;File&lt;/em&gt; menu, select “.VTKJS files” from the &lt;em&gt;File of types&lt;/em&gt; list, and save your file. This creates a VTK.js scene file for you. You may check the validity of the file by opening it inside the &lt;a href=&quot;https://kitware.github.io/paraview-glance/app/&quot;&gt;online version of ParaView Glance&lt;/a&gt; provided by Kitware.&lt;/p&gt;

&lt;p&gt;After checking the validity of the file, we are ready to upload it to any public location. I used GitHub for this purpose since it makes it easier to keep track of various changes I want to make to the list of scene files I have. I have created &lt;a href=&quot;https://github.com/mbarzegary/datasets-and-scenes/&quot;&gt;a repository&lt;/a&gt; for this purpose, to which I can upload my scene files. If you put a file named X.vtkjs inside a repository named Y, you can access the file directly using this URL (assuming you have put it in the branch “main”): “https://raw.githubusercontent.com/&amp;lt;your_username&amp;gt;/Y/main/X.vtkjs”. You may choose to upload it anywhere else like a public cloud or a private website.&lt;/p&gt;

&lt;p&gt;Cool, so it’s time for the final step. The code you need to add to the source of the page is a couple of lines of HTML to load the corresponding JavaScript library and provide it with the scene file. The code looks like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://kitware.github.io/paraview-glance/app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;datadir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://raw.githubusercontent.com/mbarzegary/datasets-and-scenes/main/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;degrading_screw.vtkjs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;iframe src='&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?name=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;url=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datadir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' id='iframe' width='1100' height='900'&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does it do? It first defines a variable to point to the web app location (can be either online or offline) as well as 2 variables to keep the directory in which the scene file is located and the name of the file. The latter is stored in 2 variables instead of 1 to allow providing the web app with a unique (instance) name, which is actually the name of the file in this case. The URL pointing to the scene file is then created by appending these 2 variables. After this, a special HTML element (an iframe) is created and the app is generated inside it. You need to change the second and the third variables accordingly to point to the path and name of your own files.&lt;/p&gt;

&lt;p&gt;It’s worth noting that as an alternative solution, you can choose to download the latest version of ParaView Glance, upload it to your web server, and point to this new location for loading the app (the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; variable in our code snippet). Instead of doing this, I usually prefer to load the latest version of things online from the corresponding website directly, which is in this case the Kitware GitHub pages site (kitware.github.io).&lt;/p&gt;

&lt;p&gt;That’s all we need to do. The result will be something like below. Try to play with it with your mouse buttons and see it in action.&lt;/p&gt;

&lt;script&gt;
    var app = &quot;https://kitware.github.io/paraview-glance/app&quot;;
    var datadir = &quot;https://raw.githubusercontent.com/mbarzegary/datasets-and-scenes/main/&quot;;
    var file = &quot;degrading_screw.vtkjs&quot;;

    document.write(&quot;&lt;iframe src='&quot; + app + &quot;?name=&quot; + file + &quot;&amp;url=&quot; +datadir + file + &quot;' id='iframe' width='1100' height='900'&gt;&lt;/iframe&gt;&quot;);
&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Import 3D mesh files into FreeFEM - Part 1</title>
   <link href="http://localhost:4000/2021/07/31/import-3d-mesh-into-freefem-part1/"/>
   <updated>2021-07-31T00:00:00+02:00</updated>
   <id>http://localhost:4000/2021/07/31/import-3d-mesh-into-freefem-part1</id>
   <content type="html">&lt;p&gt;Although &lt;a href=&quot;https://freefem.org/&quot;&gt;FreeFEM&lt;/a&gt; has quite some rich features for 2D mesh generation and manipulation, there are not so great things available for 3D meshes natively. So, importing 3D mesh files for complex geometries becomes a challenging task in finite element computation using FreeFEM. Some cool 3D mesh file formats are supported out-of-box in FreeFEM (using &lt;code class=&quot;highlighter-rouge&quot;&gt;readmesh3&lt;/code&gt; for MEDIT files and &lt;code class=&quot;highlighter-rouge&quot;&gt;gmshload&lt;/code&gt; for &lt;a href=&quot;https://gmsh.info/&quot;&gt;GMSH&lt;/a&gt; files). But, the problem will be labeling the entities in complex geometries in a way that can be read easily inside FreeFEM programs to be used for defining regions and boundary conditions.&lt;/p&gt;

&lt;p&gt;To do this, to the best of my knowledge, there are a couple of different techniques using various CAD programs. The goal of this series of blog posts is to demonstrate the techniques I have found while playing with these tools. To begin with, I use SALOME software to create a mesh and directly import it to FreeFEM. In next posts, I will use mesh conversion tools and other CAD programs for alternative solutions.&lt;/p&gt;

&lt;p&gt;SALOME has a bunch of various modules for geometry construction. For complex parametric geometries, the &lt;em&gt;Shaper&lt;/em&gt; module provides a SolidWorks-like interface, but for simpler ones, the &lt;em&gt;Geometry&lt;/em&gt; module suffices. In this post, we use the &lt;em&gt;Geometry&lt;/em&gt; module to create a simple cylinder and then the &lt;em&gt;Mesh&lt;/em&gt; module to generate a mesh out of it. We create a set of groups during the geometry construction and import them into the mesh generation process to label the surfaces. That’s actually as simple as that. Let’s go for it.&lt;/p&gt;

&lt;p&gt;Let’s say we are going to create a mesh for a fluid simulation inside a pipe. The pipe is a simple cylinder with inlet and outlet on the sides and wall on the outer surface. So, first, create a simple cylinder (New Entities -&amp;gt; Primitives -&amp;gt; Cylinder). The size doesn’t matter at this point but you should remember it to define mesh size later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-1.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;50%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I said before, the next step is to create some groups on the constructed geometry. We will use these groups later to create labels in the mesh generation process. Creating groups is easy but requires attention to select correct entities (like surfaces and volumes). Right click on the cylinder in the &lt;em&gt;Object Browser&lt;/em&gt; and select &lt;em&gt;Create Group&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-2.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;70%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then select the 2D plane type as the &lt;em&gt;Shape Type&lt;/em&gt; (because we are going to mark the surfaces), and then select the cylinder outer surface. Click &lt;em&gt;Add&lt;/em&gt;, and you should have the surface added to the list. You may change the name of the group to easily identify it in the mesh generation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-3.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;90%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;em&gt;Apply&lt;/em&gt; and do the same for top and bottom surfaces separately. Name them as “inlet” and “outlet”. You should end up with 3 groups in the &lt;em&gt;Object Browser&lt;/em&gt;, for which you can turn on/off the visibility (the eye icon) to check their correctness.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-4.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;90%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After doing this we are ready to go to the mesh generation step. Switch to &lt;em&gt;Mesh&lt;/em&gt; module, select the geometry, and select &lt;em&gt;Create Mesh&lt;/em&gt; (Mesh -&amp;gt; Create Mesh). FreeFEM supports tetrahedral elements only, so select “Tetrahedral” for the &lt;em&gt;Mesh type&lt;/em&gt; and “NETGEN 1D-2D-3D” for the &lt;em&gt;Algorithm&lt;/em&gt;. Then click on the gear button next to &lt;em&gt;Hypothesis&lt;/em&gt; and select “NETGEN 3D Parameters”. Here is where you need to take into account the size of the original cylinder and specify the mesh settings according to it. After entering your desired values for the mesh size settings, click &lt;em&gt;Ok&lt;/em&gt; and &lt;em&gt;Apply&lt;/em&gt;. Then, right click on the created “Mesh_1” (in the &lt;em&gt;Object Browser&lt;/em&gt;) and select &lt;em&gt;Compute&lt;/em&gt;. This is an example of the output for the shown parameters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-5.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;100%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, it’s time to do the magic. Right click on the mesh again and select &lt;em&gt;Create Groups from Geometry&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-6.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;60%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the &lt;em&gt;Geometry&lt;/em&gt; box selected (in the &lt;em&gt;Elements&lt;/em&gt; group), expand the geometry tree in &lt;em&gt;Object Browser&lt;/em&gt; and select the 3 groups we already created. After doing this, you should have the groups added to the &lt;em&gt;Geometry&lt;/em&gt; box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-7.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;90%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Apply&lt;/em&gt;, similar to the check we did for the geometry groups, you can hide/show the individual groups to be sure that they are created correctly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-8.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;80%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, so, we are done. That’s all we needed to do. Right click on the mesh, select &lt;em&gt;Export&lt;/em&gt; and then &lt;em&gt;GMF file&lt;/em&gt;. This creates a .mesh file, a format that is natively supported by FreeFEM. Yes, that’s right, SALOME can output a mesh that can be directly imported to FreeFEM. What can be better than that?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-9.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;70%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last challenge is to find the label numbers. This can be easily done using GMSH. Open the mesh in GMSH and open &lt;em&gt;Visibility&lt;/em&gt; (Tools -&amp;gt; Visibility). You can see the corresponding labels there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/salome-ff-10.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;100%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may use this technique to create multi-volume mesh files as well. The principle is exactly the same, but you create groups for 3D entities instead of the 2D ones you saw in this post.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Separating different volume mesh blocks (regions) using FreeFEM</title>
   <link href="http://localhost:4000/2021/06/13/separate-different-mesh-blocks/"/>
   <updated>2021-06-13T00:00:00+02:00</updated>
   <id>http://localhost:4000/2021/06/13/separate-different-mesh-blocks</id>
   <content type="html">&lt;p&gt;Lots of mesh generation routines may result in a multi-region mesh, out of which you want to extract a certain region (block). These kinds of mesh files are commonly found in the output of code-based mesh generation processes, i.e you generate a mesh using a mesh manipulation or computational geometry library such as &lt;a href=&quot;https://www.mmgtools.org/&quot;&gt;Mmg&lt;/a&gt; (used to generate the mesh below) or &lt;a href=&quot;https://www.cgal.org/&quot;&gt;CGAL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/separate-both.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;100%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As can be seen in the figure (visualized using &lt;a href=&quot;https://gmsh.info/&quot;&gt;GMSH&lt;/a&gt;), in addition to several surfaces and curves, there are 2 volume sets in the generated mesh. We are interested to extract different regions into separate mesh files while preserving the surface sets. One possible solution is to write a code using Mmg that does this, but this requires dealing with the Mmg data structures. A much simpler approach is taking advantage of easy-to-use meshing interface in &lt;a href=&quot;https://freefem.org/&quot;&gt;FreeFEM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The mesh above belongs to a tissue engineering scaffold in a mixed gyroid shape. These scaffolds are widely used for culturing cells. It consists of a volume block for the scaffold itself and a block for the void space around it (in which the cells start to proliferate). The goal is to separate these two parts. The code for doing that will be as simple as this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;msh3&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;getARGV.idp&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-mesh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mesh_file_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;mesh3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readmesh3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.mesh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mesh3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeshScaffold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mesh3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeshVoid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;savemesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshScaffold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-scaffold.mesh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;savemesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshVoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-void.mesh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code assumes that the mesh is in the medit format (.mesh extension). In other cases, you can use GMSH to convert it to medit. By running the code, the mesh is divided into the scaffold part (region number 3) and the void space (region number 2). The resulted mesh for region #3 will be this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/blog/separate-scaffold.jpg&quot; alt=&quot;color photo ftl&quot; width=&quot;100%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Solving Stefan (moving-boundary) formulation of a diffusion problem - Part 3 - FreeFEM (C++) implementation</title>
   <link href="http://localhost:4000/2021/04/10/1d-stefan-formulation-part3/"/>
   <updated>2021-04-10T00:00:00+02:00</updated>
   <id>http://localhost:4000/2021/04/10/1d-stefan-formulation-part3</id>
   <content type="html">&lt;p&gt;In the &lt;a href=&quot;/2021/02/15/1d-stefan-formulation-part2/&quot;&gt;previous post&lt;/a&gt;, we finished working on the implementation of a Newton solver to obtain the value of &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; in the following equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha=\frac{c_{0}-c_{\text {sat }}}{c_{\text {sol }}-c_{\text {sat }}} \sqrt{\frac{D}{\pi}} \frac{\exp \left(\frac{-\alpha^{2}}{D}\right)}{\operatorname{erfc}\left(\frac{-\alpha}{\sqrt{D}}\right)}&lt;/script&gt;

&lt;p&gt;Now, we want to follow the same approach, but this time in &lt;a href=&quot;https://freefem.org/&quot;&gt;FreeFEM&lt;/a&gt;, which enables us to embed the implementation inside relevant applications. As described before, in order to solve the above equation using Newton’s method, we need to know the derivative of the function as well. We used SymPy to calculate it, but then, the question is how to do that in a C-like language such as FreeFEM. The answer lies within one of the less-known features of SymPy: ability to print C functions. So, let’s ask SymPy to write the C code for us.&lt;/p&gt;

&lt;p&gt;For simplicity, I put the necessary part of the code again here:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_session&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;init_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quiet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alpha, D, C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erfc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dfunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, we have the function and its derivitive in the &lt;code class=&quot;highlighter-rouge&quot;&gt;func&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dfunc&lt;/code&gt; variables. Time to magic, let’s take advantage of SymPy printing APIs:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.printing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_ccode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_ccode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_ccode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It prints the following output in C syntax, which can be directly copied into a C program.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-C*sqrt(D)*exp(-pow(alpha, 2)/D)/(sqrt(M_PI)*(2 - erfc(alpha/sqrt(D)))) + alpha

2*C*exp(-2*pow(alpha, 2)/D)/(M_PI*pow(2 - erfc(alpha/sqrt(D)), 2)) + 2*C*alpha*exp(-pow(alpha, 2)/D)/(sqrt(M_PI)*sqrt(D)*(2 - erfc(alpha/sqrt(D)))) + 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, similar to &lt;a href=&quot;/2021/02/15/1d-stefan-formulation-part2/&quot;&gt;the developed Python code&lt;/a&gt;, we implement a simple FreeFEM code for the Newton’s method.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erfc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erfc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erfc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Delta is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Root is at &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt; f(x) at root is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then, we can check it with some numerical values for the constants and 3 different initial points:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cSol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1735&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cSat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;134&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cSat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cSol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cSat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0001366&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e-7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e-7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e-7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which produces this output (using FreeFEM v4.7):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Delta is 3.70539e-07
Delta is 1.63268e-13
&amp;gt;&amp;gt;&amp;gt;&amp;gt; Root is at -0.000583359
&amp;gt;&amp;gt;&amp;gt;&amp;gt; f(x) at root is 1.63268e-13-0.000583359
Delta is 0.000551904
Delta is 3.70539e-07
Delta is 1.63268e-13
&amp;gt;&amp;gt;&amp;gt;&amp;gt; Root is at -0.000583359
&amp;gt;&amp;gt;&amp;gt;&amp;gt; f(x) at root is 1.63268e-13-0.000583359
Delta is 0.000551904
Delta is 3.70539e-07
Delta is 1.63268e-13
&amp;gt;&amp;gt;&amp;gt;&amp;gt; Root is at -0.000583359
&amp;gt;&amp;gt;&amp;gt;&amp;gt; f(x) at root is 1.63268e-13-0.000583359
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Solving Stefan (moving-boundary) formulation of a diffusion problem using numerical and symbolic computing - Part 2</title>
   <link href="http://localhost:4000/2021/02/15/1d-stefan-formulation-part2/"/>
   <updated>2021-02-15T00:00:00+01:00</updated>
   <id>http://localhost:4000/2021/02/15/1d-stefan-formulation-part2</id>
   <content type="html">&lt;p&gt;In the &lt;a href=&quot;/2020/12/28/1d-stefan-formulation-part1/&quot;&gt;previous post&lt;/a&gt;, I quickly demonstrated the formulation of a moving-boundary problem for a 1D case, but in the end, we reached a problem related to the complexity of the derived equation. The complexity led to &lt;code class=&quot;highlighter-rouge&quot;&gt;NotImplementedError&lt;/code&gt;, which means that the symbolic solver is not capable of solving that. As an alternative solution, in this post, we switch to a numerical solver to obtain the value of &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; through the following equation (see previous post for further explanation of this):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha=\frac{c_{0}-c_{\text {sat }}}{c_{\text {sol }}-c_{\text {sat }}} \sqrt{\frac{D}{\pi}} \frac{\exp \left(\frac{-\alpha^{2}}{D}\right)}{\operatorname{erfc}\left(\frac{-\alpha}{\sqrt{D}}\right)}&lt;/script&gt;

&lt;p&gt;To this end, we use &lt;a href=&quot;https://en.wikipedia.org/wiki/Newton%27s_method&quot;&gt;Newton method&lt;/a&gt;, an iterative method to find the root of an equation. We reformulate the above equation and use the Newton method to find the value of the root, which will be &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; in this case.&lt;/p&gt;

&lt;p&gt;Newton method works based on evaulation of the following iterative equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x_{n+1}=x_{n}-\frac{f\left(x_{n}\right)}{f^{\prime}\left(x_{n}\right)}&lt;/script&gt;

&lt;p&gt;We start by guessing the initial value of &lt;script type=&quot;math/tex&quot;&gt;x_{n}&lt;/script&gt;, and then successively find a new value of &lt;script type=&quot;math/tex&quot;&gt;x_{n+1}&lt;/script&gt; and replace it with &lt;script type=&quot;math/tex&quot;&gt;x_{n}&lt;/script&gt; again. The desired function in our case can be defined based on the above expression for &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(\alpha) = \alpha - C \sqrt{\frac{D}{\pi}} \frac{\exp \left(\frac{-\alpha^{2}}{D}\right)}{\operatorname{erfc}\left(\frac{-\alpha}{\sqrt{D}}\right)}&lt;/script&gt;

&lt;p&gt;with &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; being:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C=\frac{c_{0}-c_{\text {sat }}}{c_{\text {sol }}-c_{\text {sat }}}&lt;/script&gt;

&lt;p&gt;Sympy can be used to easily calculate the derivative of &lt;script type=&quot;math/tex&quot;&gt;f(\alpha)&lt;/script&gt;. Similar to the previous post, we define appropriate symbols in Sympy, but this time, we also assign some numerical values to them for facilitating further evaluations.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_session&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;init_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quiet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;D_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.00075&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c_sol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1735&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c_sat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;134&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_sol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alpha, D, C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erfc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which produces the following output:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{C \sqrt{D} e^{- \frac{\alpha^{2}}{D}}}{\sqrt{\pi} \left(2 - \operatorname{erfc}{\left(\frac{\alpha}{\sqrt{D}} \right)}\right)} + \alpha = 0&lt;/script&gt;

&lt;p&gt;Now, we can simply calculate the derivitive of &lt;script type=&quot;math/tex&quot;&gt;f(\alpha)&lt;/script&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dfunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dfunc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which results to:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{2 C e^{- \frac{2 \alpha^{2}}{D}}}{\pi \left(2 - \operatorname{erfc}{\left(\frac{\alpha}{\sqrt{D}} \right)}\right)^{2}} + \frac{2 C \alpha e^{- \frac{\alpha^{2}}{D}}}{\sqrt{\pi} \sqrt{D} \left(2 - \operatorname{erfc}{\left(\frac{\alpha}{\sqrt{D}} \right)}\right)} + 1&lt;/script&gt;

&lt;p&gt;Although this looks a bit complicated, we don’t care about the complexity as Sympy will take care of the evaluation of this expression for obtaining &lt;script type=&quot;math/tex&quot;&gt;f^{\prime}\left(\alpha\right)&lt;/script&gt; in each iteration. Let’s define some functions for the corresponding terms in the Newton method equation:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dfunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evalf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evalf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then, a pretyy simple declaration of the iterative Newton method:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newtons_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Delta is '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Root is at '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; f(x) at root is '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this definition, the code stops iterating when the error drops below a certain threshold (passed by &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; to the function).&lt;/p&gt;

&lt;p&gt;Okay, everything is ready so far. We can start the iterations by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;newtons_method(F, dF, x0, 1e-7, True)&lt;/code&gt;, in which &lt;code class=&quot;highlighter-rouge&quot;&gt;x0&lt;/code&gt; is the initial point to start with and the error threshold is &lt;script type=&quot;math/tex&quot;&gt;10^{-7}&lt;/script&gt;. But, a better approach can be running the process for various start points and see if they all reach the same result or not:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x0s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;newtons_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e-7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which generates this output, indicating that the value of &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;-0.001366&lt;/script&gt; with the selected values for the chemical parameters:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Delta is  8.68237762054906e-7
Delta is  3.82565589437956e-13
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Root is at  -0.00136691381199428
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; f(x) at root is  3.82565589437956e-13
Delta is  0.00129321032032748
Delta is  8.68237762054906e-7
Delta is  3.82565589437956e-13
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Root is at  -0.00136691381199428
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; f(x) at root is  3.82565589437956e-13
Delta is  0.00129321032032748
Delta is  8.68237762054906e-7
Delta is  3.82565589437956e-13
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Root is at  -0.00136691381199428
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; f(x) at root is  3.82565589437956e-13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the selected initial points all have converged to the same value, but of course the number of iterations is different to reach the root.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Solving Stefan (moving-boundary) formulation of a diffusion problem using numerical and symbolic computing - Part 1</title>
   <link href="http://localhost:4000/2020/12/28/1d-stefan-formulation-part1/"/>
   <updated>2020-12-28T00:00:00+01:00</updated>
   <id>http://localhost:4000/2020/12/28/1d-stefan-formulation-part1</id>
   <content type="html">&lt;p&gt;Moving-boundary problems are a subset of the general concept of boundary-value problems which not only require the solution of the underlying partial differential equation (PDE), but also the determination of the boundary of the domain (or sub-domains) as part of the solution.  Moving-boundary problems are usually referred to as Stefan problems and can be used to model a plethora of phenomena ranging from phase separation and multiphase flows in materials engineering to bone development and tumor growth in biology.&lt;/p&gt;

&lt;p&gt;Diffusion systems are the mathematical models in which the change of state variables occurs via spreading of components. These systems are described by a set of parabolic PDEs and can model a large number of different systems in science and engineering. Combining the diffusion systems with moving-boundary problems provides a way to study the systems in which the diffusion leads to the change of domain geometry. Such systems have great importance in various real-world scenarios in chemistry and chemical engineering as well as environmental and life sciences.&lt;/p&gt;

&lt;p&gt;In this post, I will describe the simplest possible formulation of such a system. The focus is on the Stefan problem, and the contribution of the diffusion part is simplified in a 1D formulation of a diffusion-controlled moving boundary test-case. In this example, we want to find the velocity of the moving interface in a solid-liquid diffusion system in which the solid particles diffuse in the liquid and the interface moves as a result of mass loss. Such a system resembles corrosion or degradation phenomena. For a 1D case, the position of the diffusion interface can be determined by:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;s(t)=s_{0}+2 \alpha \sqrt{t},&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;s(t)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;s_0&lt;/script&gt; are the current and initial interface positions, respectively, and &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; is obtained through solving:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha=\frac{c_{0}-c_{\text {sat }}}{c_{\text {sol }}-c_{\text {sat }}} \sqrt{\frac{D}{\pi}} \frac{\exp \left(\frac{-\alpha^{2}}{D}\right)}{\operatorname{erfc}\left(\frac{-\alpha}{\sqrt{D}}\right)}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;c_{\text {sol}}&lt;/script&gt; is the concentration in the solid bulk (i.e. materials density), and &lt;script type=&quot;math/tex&quot;&gt;c_{\text {sat}}&lt;/script&gt; is the concentration at which the material is released to the medium. &lt;script type=&quot;math/tex&quot;&gt;c_{0}&lt;/script&gt; represents the initial concentration of the solid ions in the liquid, which is usually zero for most corrosion cases. Erfc is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Error_function&quot;&gt;complementary error function&lt;/a&gt; and is defined as (it is usually available as a math function in most of the  numerical and symbolic computing libraries):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text { erfc } z=1-\operatorname{erf} z = 1 - \frac{2}{\sqrt{\pi}} \int_{0}^{z} e^{-t^{2}} d t&lt;/script&gt;

&lt;p&gt;To simplify the notation, let’s encapsulate the concentration fraction:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C=\frac{c_{0}-c_{\text {sat }}}{c_{\text {sol }}-c_{\text {sat }}}&lt;/script&gt;

&lt;p&gt;So, the equation would be:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha=C \sqrt{\frac{D}{\pi}} \frac{\exp \left(\frac{-\alpha^{2}}{D}\right)}{\operatorname{erfc}\left(\frac{-\alpha}{\sqrt{D}}\right)}&lt;/script&gt;

&lt;p&gt;Obviously, this is not a simple equation to obtain &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; directly, but first, before going to use a numerical technique to solve it, we try to use a symbolic computation to see if it is capable of handling such an equation. For this purpose, we use &lt;a href=&quot;https://www.sympy.org/en/index.html&quot;&gt;SymPy&lt;/a&gt;, a powerful Python package for symbolic mathematics.&lt;/p&gt;

&lt;p&gt;We should first import the package and initialize an interactive session:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_session&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;init_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quiet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we define the symbols:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alpha, D, C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It was pretty simple, wasn’t it. So, let’s go for defining the main equation and printing it to be sure that it’s defined as expected:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erfc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which results to this output (which will be written in the LaTeX format thanks to what &lt;code class=&quot;highlighter-rouge&quot;&gt;init_session&lt;/code&gt; has already prepared for us):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{C \sqrt{D} e^{- \frac{\alpha^{2}}{D}}}{\sqrt{\pi} \left(2 - \operatorname{erfc}{\left(\frac{\alpha}{\sqrt{D}} \right)}\right)} + \alpha = 0&lt;/script&gt;

&lt;p&gt;Perfect, let’s call the solver to see what happens:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It produces the following error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NotImplementedError       Traceback (most recent call last)
&amp;lt;ipython-input-3-644d539985dd&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 solve(eq, a)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oops, apparently, the equation was so complex for our symbolic solver to understand, and it means nothing but we should switch to a numerical implementation. This is what I will explain in the next post.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deriving weak formulation of partial differential equations</title>
   <link href="http://localhost:4000/2020/11/06/derive-weak-form-pde/"/>
   <updated>2020-11-06T00:00:00+01:00</updated>
   <id>http://localhost:4000/2020/11/06/derive-weak-form-pde</id>
   <content type="html">&lt;p&gt;The finite element method doesn’t need an introduction, but at the core of this magical method, in its mathematical nature, one challenging step makes it sometimes a bit difficult for newcomers to immediatley jump start and employ finite element to solve partial differential equations (PDEs) numerically. This challenging part is deriving the weak formulation of the PDE, which is indeed one of the very first steps a researcher should take to use the available PDE solvers (like &lt;a href=&quot;https://freefem.org/&quot;&gt;FreeFEM&lt;/a&gt;, &lt;a href=&quot;https://fenicsproject.org/&quot;&gt;FEniCS&lt;/a&gt;, and &lt;a href=&quot;https://www.dealii.org/&quot;&gt;deal.ii&lt;/a&gt;) to simulate a mathematical model.&lt;/p&gt;

&lt;p&gt;Although deriving the weak form of a PDE is relatively simple, finding a good reference that demonstrates how to do it in action for the first time can be a bit difficult. This topic is well covered in most of the finite element books (the ones that discuss the mathematical aspects), but you need to go through a bunch of math to find the most essential steps. In this post, I try to explain this process by deriving the weak form of a reaction-diffusion PDE as an example. The equation we want to deal with is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial u}{\partial t}=\nabla \cdot (D   \nabla u)- s u&lt;/script&gt;

&lt;p&gt;in which, &lt;script type=&quot;math/tex&quot;&gt;u=u(\mathbf{x},t)&lt;/script&gt; is the state variable we want to find at each point of space and time. This is also called the strong form of the PDE. To obtain the finite element formulation, the weak form of the PDE is required. In order to get this, we define a space of test functions and then, multiply each term of the PDE by any arbitrary function as a member of this space. The test function space is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{V}=\left\{v(\mathbf{x}) | \mathbf{x} \in {\Omega}, v(\mathbf{x}) \in \mathcal{H}^{1}(\Omega), \text { and } v(\mathbf{x})=0 \text { on } \Gamma\right\}&lt;/script&gt;

&lt;p&gt;in which the &lt;script type=&quot;math/tex&quot;&gt;\Omega&lt;/script&gt; is the domain of interest, &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is the boundary of &lt;script type=&quot;math/tex&quot;&gt;\Omega&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;\mathcal{H}^{1}&lt;/script&gt; denotes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sobolev_space&quot;&gt;Sobolev space&lt;/a&gt; of the domain &lt;script type=&quot;math/tex&quot;&gt;\Omega&lt;/script&gt;, which is a space of functions whose derivatives are square-integrable functions in &lt;script type=&quot;math/tex&quot;&gt;\Omega&lt;/script&gt;. The solution of the PDE belongs to a trial function space, which is similarly defined as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{S}_{t}=\left\{u(\mathbf{x}, t) | \mathbf{x} \in \Omega, t&gt;0, u(\mathbf{x}, t) \in \mathcal{H}^{1}(\Omega), \text { and } \frac{\partial u}{\partial n}=0 \text { on } \Gamma\right\}.&lt;/script&gt;

&lt;p&gt;Then, we multiply each term of the PDE to an arbitrary function &lt;script type=&quot;math/tex&quot;&gt;v \in \mathcal{V}&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial u}{\partial t} v=\nabla \cdot (D  \nabla u) v- s u v.&lt;/script&gt;

&lt;p&gt;Integrating over the whole domain yields:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{\Omega} \frac{\partial u}{\partial t} v d \omega=\int_{\Omega} \nabla \cdot (D  \nabla u) v d \omega-\int_{\Omega} s u v d \omega.&lt;/script&gt;

&lt;p&gt;The diffusion term can be split using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Integration_by_parts&quot;&gt;integration by parts&lt;/a&gt; technique:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{\Omega} \nabla \cdot (D  \nabla u) v d \omega = \int_{\Omega} \nabla \cdot[v(D  \nabla u)] d \omega-\int_{\Omega} (\nabla v) \cdot(D  \nabla u) d \omega&lt;/script&gt;

&lt;p&gt;in which the second term can be converted to a surface integral on the domain boundary by applying the &lt;a href=&quot;https://en.wikipedia.org/wiki/Green%27s_theorem&quot;&gt;Green’s divergence theory&lt;/a&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{\Omega} \nabla \cdot[v(D  \nabla u)] d \omega = \int_{\Gamma} D v \frac{\partial u}{\partial n} d \gamma.&lt;/script&gt;

&lt;p&gt;For the temporal term, we use the finite difference method and apply a first-order &lt;a href=&quot;https://en.wikipedia.org/wiki/Backward_Euler_method&quot;&gt;backward Euler scheme&lt;/a&gt; for discretization, which makes it possible to solve the PDE implicitly:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial u}{\partial t} = \frac{u-u^{n}}{\Delta t}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;u^n&lt;/script&gt; denotes the value of the state variable in the previous time step (or initial condition for the first time step). Inserting all these into the integral form yields:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{\Omega} \frac{u-u^{n}}{\Delta t} v d \omega=\int_{\Gamma} D v  \frac{\partial u}{\partial n} d \gamma-\int_{\Omega} D  \nabla u \cdot \nabla v d \omega-\int_{\Omega} s u v d \omega.&lt;/script&gt;

&lt;p&gt;The surface integral is zero because there is a no-flux boundary condition on the boundary of the computational domain (defined in the trial function space). By reordering the equation, we get:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{\Omega} \frac{u}{\Delta t} v d \omega+\int_{\Omega} D \cdot \nabla \cdot u \nabla v d \omega+\int_{\Omega} s u v d \omega=\int_{\Omega} \frac{u^{n}}{\Delta t} v d \omega&lt;/script&gt;

&lt;p&gt;which is the weak form of the PDE and can be written as (by multiplying to &lt;script type=&quot;math/tex&quot;&gt;\Delta t&lt;/script&gt;):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{\Omega} {u} v d \omega+\int_{\Omega} \Delta t D  \nabla u \cdot  \nabla v d \omega+\int_{\Omega} \Delta t s u v d \omega=\int_{\Omega} {u^{n}} v d \omega.&lt;/script&gt;

&lt;p&gt;So, the problem is finding a function &lt;script type=&quot;math/tex&quot;&gt;u(t) \in \mathcal{S}_{t}&lt;/script&gt; such that for all &lt;script type=&quot;math/tex&quot;&gt;v \in \mathcal{V}&lt;/script&gt; the above equation would be satisfied. Defining and solving this problem is simple and straightforward in a wide variety of available finite element PDE solvers such as FreeFEM.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Building OpenFOAM in a Conda virtual environment</title>
   <link href="http://localhost:4000/2020/10/18/build-openfoam-in-conda-environment/"/>
   <updated>2020-10-18T00:00:00+02:00</updated>
   <id>http://localhost:4000/2020/10/18/build-openfoam-in-conda-environment</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;/2020/10/10/using-conda-as-a-build-environment/&quot;&gt;previous post&lt;/a&gt;, I explained why a Conda environment would be interesting for building software programs in an isolated box. In this post, as an example, I describe how it works if we want to build &lt;a href=&quot;https://openfoam.org/&quot;&gt;OpenFOAM&lt;/a&gt; in this manner. As I said, the main advantage of doing this is the possibility of building/installing software without the root privilege, a scenario that happens frequently while working with clusters and supercomputers. A root previlege is required for following the &lt;a href=&quot;https://openfoam.org/download/source/&quot;&gt;official build procedure for OpenFOAM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following procedure is independent of the underlying Linux installation, and only a tool to download Miniconda and a text editor suffice (here I have used &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nano&lt;/code&gt; for these purposes). Also, it’s worth mentioning that all the paths are taken from my system, so throughout the tutorial, make sure to double-check all the paths/directories to make sure that they match your system configuration. The tutorial is prepared for &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;, but the approach should be more or less the same for other shells and can be modified accordingly&lt;/p&gt;

&lt;p&gt;Okay, the first step is to download and install Conda. I personally prefer &lt;a href=&quot;https://docs.conda.io/en/latest/miniconda.html&quot;&gt;Miniconda&lt;/a&gt; over a full &lt;a href=&quot;https://www.anaconda.com/&quot;&gt;Anaconda&lt;/a&gt; installation, which usually leaves you with a bunch of unused packages and a tremendous amount of disk usage. Miniconda provides you with a minimal installation of Conda, and you can use it to download the necessary packages only. So, let’s download the installer and run it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash Miniconda3-latest-Linux-x86_64.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Follow the onscreen instruction. In the last step, you may choose to auto-initialize the base environment every time you open your BASH session. Doing this saves you from doing some extra steps to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt; executable path to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable, so it’s better to let the installer add the appropriate statements to your profile’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;. If not, execute this command after adding the bin folder to &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; and restarting your session:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda init bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, now, Conda is fully under our control to follow our orders. Let’s create a virtual environment. We call it “gcc” just because we want to use &lt;a href=&quot;https://gcc.gnu.org/&quot;&gt;GNU Compiler Collection&lt;/a&gt; to build things.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; gcc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By activating the environment, we isolate ourselves from the rest of the system. Let’s do it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda activate gcc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, it’s time to install all the prerequisites in the virtual environment. It will be as easy as calling &lt;code class=&quot;highlighter-rouge&quot;&gt;conda install&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda activate gcc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gcc_linux-64
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gxx_linux-64
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gfortran_linux-64
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cmake
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openmpi
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;flex
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bison
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;boost
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;curl
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although this is something done automatically, let’s double-check that the gcc bundled scripts are run to change the build environment variables (like &lt;code class=&quot;highlighter-rouge&quot;&gt;$CC&lt;/code&gt;) to point to the compilers installed inside the virtual environment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ $CONDA_PREFIX&lt;/span&gt;/etc/conda/activate.d/activate-gcc_linux-64.sh
&lt;span class=&quot;nv&quot;&gt;$ $CONDA_PREFIX&lt;/span&gt;/etc/conda/activate.d/activate-gxx_linux-64.sh
&lt;span class=&quot;nv&quot;&gt;$ $CONDA_PREFIX&lt;/span&gt;/etc/conda/activate.d/activate-gfortran_linux-64.sh
&lt;span class=&quot;nv&quot;&gt;$ $CONDA_PREFIX&lt;/span&gt;/etc/conda/activate.d/activate-binutils_linux-64.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a standard world, everything should be ready till now, and software build routines should look for the environment variables to find the appropriate compilers. For example, a standard build command in a makefile should be something like &lt;code class=&quot;highlighter-rouge&quot;&gt;$CC source.c&lt;/code&gt; and not &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc source.c&lt;/code&gt;. But, we don’t live in such a world, and it means that not every single piece of software follows this principle. Unfortunately, OpenFOAM is not an exception in this regard, and its build routine calls the compilers’ executable directly. This creates an issue for our approach because it indeed calls the system compilers (if they are installed) and not the ones we have installed in our virtual environment. This is highly dangerous for our case, so let’s create some soft links to ask BASH to compensate.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONDA_PREFIX&lt;/span&gt;/bin/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-gcc gcc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-g++ g++
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-c++ c++
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-gfortran gfortran
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-ld ld
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-as as
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-nm nm
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-cpp cpp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-ld.bfd ld.bfd
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-ld.gold ld.gold
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; x86_64-conda_cos6-linux-gnu-ar ar
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, if you run &lt;code class=&quot;highlighter-rouge&quot;&gt;which gcc&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;which g++&lt;/code&gt;, you should see it pointing to the virtual environment compilers. Yes? So, let’s go on by cloning the source codes and do the actual build.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;openfoam
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;openfoam/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/OpenFOAM/OpenFOAM-8.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/OpenFOAM/ThirdParty-8.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;OpenFOAM comes with its own way of initializing things in BASH, and we need to follow its principle. No problem man, we will.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;OpenFOAM-8/etc/bashrc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ThirdParty-8/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool. It’s time to start the build by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;./Allwmake&lt;/code&gt;, no? No, it’s not. If you proceed, you will face lots of compiling/linking errors. It’s because we have installed all the required libraries inside the Conda environment (and not the known system directories like &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/include&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib&lt;/code&gt;). We should tell the compiler where to seek them. This is also something that should be solved in a standard way, but (not surprisingly) going for conventional things doesn’t work for OpenFOAM. As a result, we edit the config files directly. A horrible idea, but something that usually works for such issues. Let’s edit the “Scotch” build config to tell it where to find the “zlib” library. Run this command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano etc/wmakeFiles/scotch/Makefile.inc.i686_pc_linux2.shlib-OpenFOAM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and append these lines to its end:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CFLAGS  += -I /home/mojtaba/miniconda3/pkgs/zlib-1.2.11-h7b6447c_3/include 
LDFLAGS += -L /home/mojtaba/miniconda3/pkgs/zlib-1.2.11-h7b6447c_3/lib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Make sure to adapt the directories to something that matches your system paths. And now, we are ready to start building the third-party tools for OpenFOAM (which is literally just the Scotch library as we don’t intend to build ParaView).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./Allwmake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we refresh the OpenFOAM variables and go to the main source directory.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wmRefresh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../OpenFOAM-8/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We should perform some more modifications here (pay attention to the paths and adapt them before saving the files). Run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano wmake/rules/linux64Gcc/c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and add this to the end:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CFLAGS += -I /home/mojtaba/miniconda3/pkgs/zlib-1.2.11-h7b6447c_3/include -I /home/mojtaba/miniconda3/pkgs/flex-2.6.4-ha10e3a4_1/include/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do a similar thing for the C++ compiler flags:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano wmake/rules/linux64Gcc/c++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and add:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; /home/mojtaba/miniconda3/pkgs/zlib-1.2.11-h7b6447c_3/include &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; /home/mojtaba/miniconda3/pkgs/flex-2.6.4-ha10e3a4_1/include/
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/openfoam/ThirdParty-8/platforms/linux64Gcc/gperftools-svn/lib 
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/openfoam/OpenFOAM-8/platforms/linux64GccDPInt32Opt/lib/openmpi-system 
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/openfoam/ThirdParty-8/platforms/linux64GccDPInt32/lib/openmpi-system 
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/openfoam/site/8/platforms/linux64GccDPInt32Opt/lib 
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/openfoam/OpenFOAM-8/platforms/linux64GccDPInt32Opt/lib 
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/openfoam/ThirdParty-8/platforms/linux64GccDPInt32/lib 
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/openfoam/OpenFOAM-8/platforms/linux64GccDPInt32Opt/lib/dummy
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/miniconda3/pkgs/zlib-1.2.11-h7b6447c_3/lib
c++FLAGS +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,-rpath-link,/home/mojtaba/miniconda3/envs/gcc/lib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And the last one, which is a little bit tricky (because &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; is sensitive to indentation and you should pay attention to not ruin the structure of the file), is to help the linker find “zlib” again. Run this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano src/OpenFOAM/Make/options
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;LIB_LIBS&lt;/code&gt; variable to look like this (it’s safer to gather them all in one line to avoid mistakes):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LIB_LIBS = $(FOAM_LIBBIN)/libOSspecific.o -L$(FOAM_LIBBIN)/dummy -lPstream -L /home/mojtaba/miniconda3/pkgs/zlib-1.2.11-h7b6447c_3/lib -lz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, so we are all set to continue. Let’s run the build command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./Allwmake &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should adjust the number of CPU cores you want to employ (which implies the number of concurrent compile commands running at the same time). The more, the better. I had 8 free cores, so I have entered 8 here. It may take up to several hours if you run it without the &lt;code class=&quot;highlighter-rouge&quot;&gt;-j&lt;/code&gt; flag, but for example, with 8 parallel cores, it took less than one and a half hours to finish.&lt;/p&gt;

&lt;p&gt;If it succeeds (which should be the case), we can go on to test if it really works by copying one of the OpenFOAM tutorials and running it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;tests
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tests/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FOAM_TUTORIALS&lt;/span&gt;/incompressible/simpleFoam/pitzDaily &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pitzDaily/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;blockMesh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;simpleFoam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see the OpenFOAM simulation running. And that’s it. Relatively straightforward, no? To use it next time you open a BASH session, you should activate the virtual environment again (&lt;code class=&quot;highlighter-rouge&quot;&gt;conda activate gcc&lt;/code&gt;) and run the initialization script (&lt;code class=&quot;highlighter-rouge&quot;&gt;source OpenFOAM-8/etc/bashrc&lt;/code&gt;), and there you go.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Conda as a build environment for Linux</title>
   <link href="http://localhost:4000/2020/10/10/using-conda-as-a-build-environment/"/>
   <updated>2020-10-10T00:00:00+02:00</updated>
   <id>http://localhost:4000/2020/10/10/using-conda-as-a-build-environment</id>
   <content type="html">&lt;p&gt;When it comes to installing software programs and libraries on Linux, compiling from source code is a first-class citizen. I mean it’s the most preferred way and has been there to save lots of time from software developers to meet the different requirements of different hardware/software configurations on a wide variety of Linux distributions. This process has its own challenges, especially in case of installing and satisfying the required dependencies, a task that can be quite nightmarish (of course not as bad as as the nostalgic &lt;a href=&quot;https://en.wikipedia.org/wiki/DLL_Hell&quot;&gt;DLL hell&lt;/a&gt; in Windows). It can get even worse when you don’t have root access to install the dependencies, which happens every now and then in daily life of a computational researcher when he/she wants to do this on a remote cluster or a university supercomputer.&lt;/p&gt;

&lt;p&gt;A potential solution to this issue is taking advantage of container technologies like &lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;Docker&lt;/a&gt; or &lt;a href=&quot;https://singularity.lbl.gov/quickstart&quot;&gt;Singularity&lt;/a&gt;, but what if we don’t have access to these packages as well? True, the most trivial solution would be compiling all the dependencies also from source code, but you should go for it only if you have super “enough time” as it can be an endless task. This is something I did once to build &lt;a href=&quot;https://freefem.org/&quot;&gt;FreeFEM&lt;/a&gt; on an old cluster, and to be honest, it was something I will never go for that again because it required me to compile not only all the dependencies but the compilers as well (a process called “&lt;a href=&quot;https://en.wikipedia.org/wiki/Bootstrapping_(compilers)&quot;&gt;Bootstrapping&lt;/a&gt;”). By the way, that was fun enough to be told later, and yes, I should write about it at some point.&lt;/p&gt;

&lt;p&gt;So, is there any other option? Yes, there is. Although people know it as a virtual environment manager for Python, &lt;a href=&quot;https://docs.conda.io/en/latest/&quot;&gt;Conda&lt;/a&gt; can be used in a more generalized manner, and it can be a lifesaver for the aforementioned issue as it provides a fully isolated environment (like containers but without living directly on the kernel) to install the required libraries and compilers. Above this all, it’s very easy to install Conda on a Linux system without the root privilege and any previous software dependency. Yes, what can be better than that?&lt;/p&gt;

&lt;p&gt;Technically speaking, compiling things on a Conda environment can be considered as “pseudo-cross-compiling”, a sub-category of “&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross_compiler&quot;&gt;cross-compiling&lt;/a&gt;” (a common term you may frequently hear about in the field of embedded systems in which you compile a program on a system but run it somewhere else on a different architecture). But, I cannot describe pseudo-cross-compiling better than how the Anaconda team has documented it in &lt;a href=&quot;https://docs.conda.io/projects/conda-build/en/latest/resources/compiler-tools.html&quot;&gt;Anaconda compiler tools&lt;/a&gt;, so I just quote the relevant part here:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Anaconda’s compilers for Linux are built with something called crosstool-ng. They include not only GCC but also a “sysroot” with glibc, as well as the rest of the toolchain (binutils). Ordinarily, the sysroot is something that your system provides, and it is what establishes the libc compatibility bound for your compiled code. Any compilation that uses a sysroot other than the system sysroot is said to be “cross-compiling.” When the target OS and the build OS are the same, it is called a “pseudo-cross-compiler”. This is the case for normal builds with Anaconda’s compilers on Linux.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s very cool, isn’t it?&lt;/p&gt;

&lt;p&gt;A couple of weeks ago, a colleague of mine asked me for a solution to install &lt;a href=&quot;https://openfoam.org/&quot;&gt;OpenFOAM&lt;/a&gt; on a cluster on which he didn’t have root privilege. OpenFOAM has a straightforward &lt;a href=&quot;https://openfoam.org/download/source/&quot;&gt;installation procedure from the source code&lt;/a&gt; but the thing is it requires root privileges to install required dependencies, which is obviously not possible in this case. So, I tried Conda for the first time for this purpose, and indeed, it  worked like a charm for us. Yes, it was a bit challenging to make it work (which I should write about in a separate post), but it helped us to compile a complex software from scratch totally independent from the underlying OS and its configurations. In the next post, I will document the procedure in detail as an example of this approach.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Flexibility of having multiple parallel instances of Linux using WSL</title>
   <link href="http://localhost:4000/2020/09/29/wsl-multi-instance/"/>
   <updated>2020-09-29T00:00:00+02:00</updated>
   <id>http://localhost:4000/2020/09/29/wsl-multi-instance</id>
   <content type="html">&lt;p&gt;Working with Windows can be truly a nightmare in scientific computing projects. The main reason behind this is that most of the scientific computing libraries have developed natively for Linux, and in the case of cross-platform ones, the building and installation process on Linux is more straightforward and easy to accomplish. In addition to this, the freedom you have while working with the command line interface can never be experienced in Windows with PowerShell or the traditional Command Prompt.&lt;/p&gt;

&lt;p&gt;So why are we talking about this when Linux is there and we don’t need to stick to Windows? The problem arises when you work for a big organization that doesn’t allow Linux to be installed on your machine because all the operational workflow, communication systems, and things like that are going to take place in Windows (which is indeed my case at KU Leuven, although I have installed an ILLEGAL dual boot version of Linux by bypassing the organizational Bitlocker, but it’s not always feasible and convenient to reboot to Windows to join a meeting, sign something or print a document).&lt;/p&gt;

&lt;p&gt;The solution to this problem was released by Microsoft several years ago, a feature of Windows called &lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux&quot;&gt;Windows Subsystem for Linux (WSL)&lt;/a&gt;, providing you with an emulated Linux kernel on top of which you can install your favorite distribution. It gives you full terminal access as well as limited support for running graphical applications (with some tricks of course). Recently, they have also extended and upgraded this feature to a real Linux kernel in WSL 2 (which I haven’t tested yet), which has also some cool and long awaited features such as GPU support.&lt;/p&gt;

&lt;p&gt;But, beside this, WSL can be tweaked to bring even more productivity especially if you want to test multiple libraries and different configurations without touching your previous working instances of configured Linux (which indeed happens every now and then in scientific computing). Doing this in a native installation of Linux (like with &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;) requires some effort. Having multiple instances of the same Linux distribution in WSL is not supported out-of-the-box but can be accomplished using a less-known, yet fantastic tool called &lt;a href=&quot;https://github.com/DDoSolitary/&quot;&gt;LxRunOffline&lt;/a&gt;. The simplest way to install LxRunOffline is by downloading the compiled binaries from GitHub. Adding the executable path to the “Path” environment variable is highly recommended. After doing that, a new instance can be installed as simple as:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; LxRunOffline i -n &amp;lt;name_of_the_instance&amp;gt; -d &amp;lt;isntallation_location&amp;gt; -f &amp;lt;path_of_the_downloaded_image&amp;gt; -s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in which the &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; argument indicates the installation action (to see all available operations, execute &lt;code class=&quot;highlighter-rouge&quot;&gt;LxRunOffline&lt;/code&gt; without any action). Then, the installed instance can be run using:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; LxRunOffline r -n &amp;lt;name_of_the_instance&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can encapsulate this command in a batch file, which can be placed on Desktop (or even better somewhere in “Path”, so you can run it directly from Command Prompt in any directory) for an easier access.&lt;/p&gt;

&lt;p&gt;And now, the great flexibility comes with the freedom of choosing whatever you want as the distribution. What I use most often for this purpose is &lt;a href=&quot;https://ubuntu.com/core&quot;&gt;Ubuntu Core&lt;/a&gt;, a light-weight Linux distribution aimed for IoT devices, but with APT package manager installed, which enables me to start with a tiny Linux installation, and then configure it to fit my needs. By doing this, I can quickly have a fresh installation of Linux to test or run something without affecting the previous configurations I have. A wide variety of Ubuntu Core images can be downloaded &lt;a href=&quot;https://partner-images.canonical.com/core/&quot;&gt;here&lt;/a&gt;. A typical command for such a purpose can be then something like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; LxRunOffline i -n ubuntu-4.6 -d c:\wsl\ubuntu-test46 -f ubuntu-bionic-core-cloudimg-amd64-root.tar.gz -s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 

</feed>
